package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/Swejal08/go-ggqlen/graph/model"
	"github.com/Swejal08/go-ggqlen/graph/services"
	"github.com/Swejal08/go-ggqlen/utils"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.InputLogin) (*model.Login, error) {
	if err := utils.ValidateInput(input); err != nil {
		return nil, err
	}
	user, err := services.GetUserByEmail(input.Email)
	if err != nil {
		return nil, err
	}

	if user.ID == "" {
		return nil, fmt.Errorf("Invalid Credentials")
	}

	err = utils.ComparePassword(*user.Password, input.Password)
	if err != nil {
		return nil, fmt.Errorf("Invalid credentials")

	}

	tokenMetaData := utils.TokenMetadata{ID: user.ID, Email: user.Email}
	accessToken, _ := utils.SignJwtToken(tokenMetaData)

	authResponse := &model.Login{
		ID:          user.ID,
		Email:       user.Email,
		AccessToken: accessToken,
	}

	return authResponse, nil
}
