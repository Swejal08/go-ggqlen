package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/Swejal08/go-ggqlen/enums"
	"github.com/Swejal08/go-ggqlen/graph/model"
	"github.com/Swejal08/go-ggqlen/graph/services"
	"github.com/Swejal08/go-ggqlen/initializer"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.NewEvent) (*model.Event, error) {
	event, err := services.CreateEvent(input)

	if err != nil {
		fmt.Println("Event cannot be created", err.Error())
	}

	// replace 1 and 1 with  eventId that will come from event and userId from ctx.

	err = services.CreateEventMembership(1, 1, enums.Owner)

	if err != nil {
		fmt.Println("Event Membership cannot be created", err.Error())
	}

	return event, nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	database := initializer.GetDB()

	queryBuilder := initializer.GetQueryBuilder()

	ds := queryBuilder.From("event").Select("id", "name", "description", "location", "start_date", "end_date")

	sql, _, err := ds.ToSQL()
	if err != nil {
		fmt.Println("An error occurred while generating the SQL", err.Error())
	}

	rows, err := database.Query(sql)
	if err != nil {
		fmt.Println("An error occurred while executing the SQL", err.Error())
		return nil, err
	}

	defer rows.Close()

	var events []*model.Event

	for rows.Next() {
		event := &model.Event{}
		if err := rows.Scan(&event.ID, &event.Name, &event.Description, &event.Location, &event.StartDate, &event.EndDate); err != nil {
			fmt.Println("An error occurred while scanning rows", err.Error())
			return nil, err
		}

		fmt.Println(event)

		events = append(events, event)

	}

	if err := rows.Err(); err != nil {
		fmt.Println("An error occurred after iterating through rows", err.Error())
		return nil, err
	}

	return events, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
