package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/Swejal08/go-ggqlen/graph/model"
	"github.com/Swejal08/go-ggqlen/graph/services"
)

// AssignEventMembership is the resolver for the assignEventMembership field.
func (r *mutationResolver) AssignEventMembership(ctx context.Context, input model.AssignEventMembership) (*string, error) {
	eventMembership := services.GetEventMembership(input.EventID, input.UserID)

	var err error

	if eventMembership == nil {
		err = services.CreateEventMembership(input.EventID, input.UserID, input.Role)

	} else {
		err = services.UpdateEventMembership(input, eventMembership)
	}

	if err != nil {
		fmt.Println("Something went wrong when assigning event membership", err.Error())
	}

	successMessage := "Event Membership has been assigned"
	return &successMessage, nil
}

// RemoveEventMembership is the resolver for the removeEventMembership field.
func (r *mutationResolver) RemoveEventMembership(ctx context.Context, input model.RemoveEventMembership) (*string, error) {
	err := services.RemoveEventMembership(input)

	if err != nil {
		fmt.Println("Something went wrong when removing event membership", err.Error())
	}

	successMessage := "Event Membership has been removed"
	return &successMessage, nil
}
