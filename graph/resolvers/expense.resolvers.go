package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	accessControl "github.com/Swejal08/go-ggqlen/access-control"
	"github.com/Swejal08/go-ggqlen/enums"
	"github.com/Swejal08/go-ggqlen/graph/model"
	"github.com/Swejal08/go-ggqlen/graph/services"
	"github.com/Swejal08/go-ggqlen/utils"
)

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input model.NewExpense) (*model.Expense, error) {
	if err := utils.ValidateInput(input); err != nil {
		return nil, err
	}

	userId := ctx.Value("currentUserId").(string)

	allowedRoles := []enums.EventMembershipRole{enums.Admin}

	accessError := accessControl.Check(allowedRoles, userId, input.EventID)

	if accessError != nil {
		return nil, accessError
	}

	event, err := services.CreateExpense(input)

	if err != nil {
		fmt.Println("Expense cannot be created", err.Error())
	}

	return event, nil
}

// UpdateExpense is the resolver for the updateExpense field.
func (r *mutationResolver) UpdateExpense(ctx context.Context, input model.UpdateExpense) (*string, error) {
	if err := utils.ValidateInput(input); err != nil {
		return nil, err
	}

	userId := ctx.Value("currentUserId").(string)

	allowedRoles := []enums.EventMembershipRole{enums.Admin}

	accessError := accessControl.Check(allowedRoles, userId, input.EventID)

	if accessError != nil {
		return nil, accessError
	}

	expense, err := services.GetExpense(input.ID)

	if expense == nil {
		return nil, err
	}

	err = services.UpdateExpense(input)

	if err != nil {
		return nil, err
	}

	successMessage := "Expense has been updated"
	return &successMessage, nil
}

// DeleteExpense is the resolver for the deleteExpense field.
func (r *mutationResolver) DeleteExpense(ctx context.Context, input model.DeleteExpense) (*string, error) {
	userId := ctx.Value("currentUserId").(string)

	allowedRoles := []enums.EventMembershipRole{enums.Admin}

	accessError := accessControl.Check(allowedRoles, userId, input.EventID)

	if accessError != nil {
		return nil, accessError
	}

	expense, err := services.GetExpense(input.ID)

	if expense == nil {
		return nil, err
	}

	err = services.DeleteExpense(input.ID)

	if err != nil {
		return nil, err
	}

	successMessage := "Expense has been deleted"
	return &successMessage, nil
}

// TotalExpense is the resolver for the totalExpense field.
func (r *queryResolver) TotalExpense(ctx context.Context, eventID string) (*model.TotalExpense, error) {
	userId := ctx.Value("currentUserId").(string)

	allowedRoles := []enums.EventMembershipRole{enums.Admin, enums.Contributor}

	accessError := accessControl.Check(allowedRoles, userId, eventID)

	if accessError != nil {
		return nil, accessError
	}

	event, err := services.GetEvent(eventID)

	if event == nil {
		return nil, err
	}

	totalExpense, err := services.GetTotalExpensesBasedOnCategory(event)

	if err != nil {
		return nil, err
	}

	return totalExpense, nil
}
