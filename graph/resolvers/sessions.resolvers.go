package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	accessControl "github.com/Swejal08/go-ggqlen/access-control"
	"github.com/Swejal08/go-ggqlen/enums"
	"github.com/Swejal08/go-ggqlen/graph/model"
	"github.com/Swejal08/go-ggqlen/graph/services"
	"github.com/Swejal08/go-ggqlen/utils"
)

// CreateSession is the resolver for the createSession field.
func (r *mutationResolver) CreateSession(ctx context.Context, input model.NewSession) (*model.Session, error) {
	if err := utils.ValidateInput(input); err != nil {
		return nil, err
	}

	userId := ctx.Value("currentUserId").(string)

	allowedRoles := []enums.EventMembershipRole{enums.Admin, enums.Contributor}

	accessError := accessControl.Check(allowedRoles, userId, input.EventID)

	if accessError != nil {
		return nil, accessError
	}

	session, err := services.CreateSession(input)

	if err != nil {
		fmt.Println("Session cannot be created", err.Error())
	}

	fmt.Println(session)

	return session, nil
}

// UpdateSession is the resolver for the updateSession field.
func (r *mutationResolver) UpdateSession(ctx context.Context, input model.UpdateSession) (*string, error) {
	if err := utils.ValidateInput(input); err != nil {
		return nil, err
	}

	userId := ctx.Value("currentUserId").(string)

	allowedRoles := []enums.EventMembershipRole{enums.Admin, enums.Contributor}

	accessError := accessControl.Check(allowedRoles, userId, input.EventID)

	if accessError != nil {
		return nil, accessError
	}

	session, err := services.GetSession(input.ID)

	fmt.Println(session)

	if session == nil {
		return nil, err
	}

	err = services.UpdateSession(input)

	if err != nil {
		fmt.Println("Something went wrong when updating session", err.Error())
	}

	successMessage := "Session has been updated"
	return &successMessage, nil
}

// DeleteSession is the resolver for the deleteSession field.
func (r *mutationResolver) DeleteSession(ctx context.Context, input model.DeleteSession) (*string, error) {
	userId := ctx.Value("currentUserId").(string)

	allowedRoles := []enums.EventMembershipRole{enums.Admin, enums.Contributor}

	accessError := accessControl.Check(allowedRoles, userId, input.EventID)

	if accessError != nil {
		return nil, accessError
	}

	event, err := services.GetSession(input.ID)

	if event == nil {
		return nil, err
	}

	err = services.DeleteSession(input.ID)

	if err != nil {
		return nil, err
	}

	successMessage := "Session has been deleted"
	return &successMessage, nil
}
