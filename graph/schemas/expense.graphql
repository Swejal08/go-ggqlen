#import "event.graphql"
#import "directive.graphql"

type Expense {
  id: ID!
  eventId: ID!
  itemName: String!
  cost: Int!
  description: String
  categoryId: String!
}

type CategoryExpense {
  id: ID!
  name: String!
  expense: Int!
}

type TotalExpense {
  totalExpense: Int!
  name: String!
  category: [CategoryExpense]!
}

input NewExpense {
  eventId: ID! @goTag(key: "validate", value: "required")
  itemName: String! @goTag(key: "validate", value: "required")
  cost: Int! @goTag(key: "validate", value: "required")
  description: String
  categoryId: ID! @goTag(key: "validate", value: "required")
}

input UpdateExpense {
  id: ID! @goTag(key: "validate", value: "required")
  eventId: ID! @goTag(key: "validate", value: "required")
  itemName: String
  cost: Int @goTag(key: "validate", value: "int")
  description: String
  categoryId: ID
}

input DeleteExpense {
  id: ID! @goTag(key: "validate", value: "required")
  eventId: ID! @goTag(key: "validate", value: "required")
}

extend type Query {
  totalExpense(eventId: ID!): TotalExpense @Authenticate
}

extend type Mutation {
  createExpense(input: NewExpense!): Expense! @Authenticate
  updateExpense(input: UpdateExpense!): String @Authenticate
  deleteExpense(input: DeleteExpense!): String @Authenticate
}
